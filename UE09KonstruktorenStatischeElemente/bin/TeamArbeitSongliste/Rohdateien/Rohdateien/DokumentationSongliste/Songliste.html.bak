<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.5.0_06) on Tue Sep 11 23:38:36 CEST 2007 -->
<TITLE>
Songliste
</TITLE>

<META NAME="keywords" CONTENT="Songliste class">

<LINK REL ="stylesheet" TYPE="text/css" HREF="stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    parent.document.title="Songliste";
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="index.html?Songliste.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Songliste.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
Class Songliste</H2>
<PRE>
java.lang.Object
  <IMG SRC="./resources/inherit.gif" ALT="extended by "><B>Songliste</B>
</PRE>
<HR>
<DL>
<DT><PRE>public class <B>Songliste</B><DT>extends java.lang.Object</DL>
</PRE>

<P>
Speichert in einem beschränkten Array Songobjekte ab und verfügt über die 
 Fähigkeit diese aus einer Textdatei zu lesen und diese in eine Textdatei zu
 schreiben
<P>

<P>
<DL>
<DT><B>Author:</B></DT>
  <DD>Michael Wild</DD>
</DL>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#anzahl">anzahl</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Anzahl der Songs die im Array aktuell gespeichert sind
 (anzahlSongs <= this.songs.length)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#DEFAULT_MAXANZAHL">DEFAULT_MAXANZAHL</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wenn dem Konstruktor eine nicht korrekte Anzahl von Songs die verwaltet werden 
 können übergeben wird, wird Platz für DEFAULT_MAXANZAHL Songs reserviert</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#nummerAktueller">nummerAktueller</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Nummer des aktuellen Songs im Array</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#pfad">pfad</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pfad und Dateiname jener Datei, aus welcher die Songs gelesen bzw. in welche die
 Songs geschrieben werden</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>private &nbsp;Song[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#songs">songs</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Speichert in einem internen Array die Songs ab.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="Songliste.html#Songliste(int)">Songliste</A></B>(int&nbsp;maxAnzahl)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Konstruktor, der ein privates Array initialisiert in welchem maxAnzahl Songs
 aufgenommen werden können.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#aendernAktuellen(Song)">aendernAktuellen</A></B>(Song&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ändert den aktuellen Song auf den übergebenen Song ab und sortiert ihn nicht ein</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#anfuegenNeuen(Song)">anfuegenNeuen</A></B>(Song&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Trägt einen neuen Song am Ende der Songliste ein.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;Song</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#getAktueller()">getAktueller</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Liefert den aktuellen Song zurück auf den der Songzeiger nummerAktueller zeigt</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#getAnzahl()">getAnzahl</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gibt die Anzahl der Songs zurück, die momentan im Array vorhanden sind</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;Song</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#getErster()">getErster</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Liefert den ersten Song in der Songliste zurück und setzt den Songzeiger auf diesen
 Song.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;Song</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#getLetzter()">getLetzter</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Liefert den letzten Song in der Songliste zurück und setzt den Songzeiger auf diesen
 Song.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#getMaxAnzahl()">getMaxAnzahl</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Liefert die Maximale Anzahl von Songs zurück, die im Array abgespeichert werden
 können</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;Song</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#getNaechster()">getNaechster</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Liefert den nächsten Song - falls vorhanden - zurück und erhöht den Songzeiger 
 nummerAktueller um Eins.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#getPfad()">getPfad</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Liest den Dateipfad aus</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;Song</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#getVoriger()">getVoriger</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Liefert den vorigen Song - falls vorhanden - zurück und vermindert den Songzeiger
 um Eins.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#lesenSongs()">lesenSongs</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Lädt die Songs aus der Textdatei die in pfad vorhanden ist.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#loeschenAktuellen()">loeschenAktuellen</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Löscht den aktuellen Song aus der Liste.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#loeschenAlle()">loeschenAlle</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Löscht alle Songs aus der Liste.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#schreibenSongs()">schreibenSongs</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Schreibt die Songs in die Textdatei.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="Songliste.html#setPfad(java.lang.String)">setPfad</A></B>(java.lang.String&nbsp;pfad)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Setzt den Dateipfad auf jene Datei aus welcher die Songs gelesen bzw. in welche
 die Songs geschrieben werden soll</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Field Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="DEFAULT_MAXANZAHL"><!-- --></A><H3>
DEFAULT_MAXANZAHL</H3>
<PRE>
private static final int <B>DEFAULT_MAXANZAHL</B></PRE>
<DL>
<DD>Wenn dem Konstruktor eine nicht korrekte Anzahl von Songs die verwaltet werden 
 können übergeben wird, wird Platz für DEFAULT_MAXANZAHL Songs reserviert
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="constant-values.html#Songliste.DEFAULT_MAXANZAHL">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="songs"><!-- --></A><H3>
songs</H3>
<PRE>
private Song[] <B>songs</B></PRE>
<DL>
<DD>Speichert in einem internen Array die Songs ab. Dabei werden die Songs nicht in 
 sortierter Reihenfolge abgelegt
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="nummerAktueller"><!-- --></A><H3>
nummerAktueller</H3>
<PRE>
private int <B>nummerAktueller</B></PRE>
<DL>
<DD>Nummer des aktuellen Songs im Array
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="anzahl"><!-- --></A><H3>
anzahl</H3>
<PRE>
private int <B>anzahl</B></PRE>
<DL>
<DD>Anzahl der Songs die im Array aktuell gespeichert sind
 (anzahlSongs <= this.songs.length)
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="pfad"><!-- --></A><H3>
pfad</H3>
<PRE>
private java.lang.String <B>pfad</B></PRE>
<DL>
<DD>Pfad und Dateiname jener Datei, aus welcher die Songs gelesen bzw. in welche die
 Songs geschrieben werden
<P>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="Songliste(int)"><!-- --></A><H3>
Songliste</H3>
<PRE>
public <B>Songliste</B>(int&nbsp;maxAnzahl)</PRE>
<DL>
<DD>Konstruktor, der ein privates Array initialisiert in welchem maxAnzahl Songs
 aufgenommen werden können. Ist maxAnzahl <= 0, so wird über die interne 
 songs-Variable ein Array angelegt das DEFAULT_MAXANZAHL Songs aufnehmen kann.
 Weiters wird anzahl auf 0 gesetzt weil noch keine
 Songs in der Liste vorhanden sind und nummerAktueller auf -1, weil noch kein
 Song angesprungen wurde
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>maxAnzahl</CODE> - die maximale Anzahl von Songs die aufgenommen werden können</DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="getMaxAnzahl()"><!-- --></A><H3>
getMaxAnzahl</H3>
<PRE>
public int <B>getMaxAnzahl</B>()</PRE>
<DL>
<DD>Liefert die Maximale Anzahl von Songs zurück, die im Array abgespeichert werden
 können
<P>
<DD><DL>

<DT><B>Returns:</B><DD>die Anzahl der im Array maximal eintragbaren Songs</DL>
</DD>
</DL>
<HR>

<A NAME="getAnzahl()"><!-- --></A><H3>
getAnzahl</H3>
<PRE>
public int <B>getAnzahl</B>()</PRE>
<DL>
<DD>Gibt die Anzahl der Songs zurück, die momentan im Array vorhanden sind
<P>
<DD><DL>

<DT><B>Returns:</B><DD>die Anzahl der Songs die im Array momentan eingetragen sind<br>
 0 falls das Array zwar angelegt wurde aber noch keine Elemente enthalten sind</DL>
</DD>
</DL>
<HR>

<A NAME="getAktueller()"><!-- --></A><H3>
getAktueller</H3>
<PRE>
public Song <B>getAktueller</B>()</PRE>
<DL>
<DD>Liefert den aktuellen Song zurück auf den der Songzeiger nummerAktueller zeigt
<P>
<DD><DL>

<DT><B>Returns:</B><DD>den aktuellen Song oder null, falls kein Song in der Songliste enthalten
 ist</DL>
</DD>
</DL>
<HR>

<A NAME="getNaechster()"><!-- --></A><H3>
getNaechster</H3>
<PRE>
public Song <B>getNaechster</B>()</PRE>
<DL>
<DD>Liefert den nächsten Song - falls vorhanden - zurück und erhöht den Songzeiger 
 nummerAktueller um Eins. Gibt es keinen nächsten Song, wird null zurück geliefert 
 und der Songzeiger nicht erhöht
<P>
<DD><DL>

<DT><B>Returns:</B><DD>liefert den nächsten Song zurück oder null, falls dieser Song nicht
 vorhanden ist</DL>
</DD>
</DL>
<HR>

<A NAME="getVoriger()"><!-- --></A><H3>
getVoriger</H3>
<PRE>
public Song <B>getVoriger</B>()</PRE>
<DL>
<DD>Liefert den vorigen Song - falls vorhanden - zurück und vermindert den Songzeiger
 um Eins. Gibt es keinen vorigen Song wird null zurück geliefert und der Songzeiger
 nicht vermidert
<P>
<DD><DL>

<DT><B>Returns:</B><DD>den vorigen Song</DL>
</DD>
</DL>
<HR>

<A NAME="getErster()"><!-- --></A><H3>
getErster</H3>
<PRE>
public Song <B>getErster</B>()</PRE>
<DL>
<DD>Liefert den ersten Song in der Songliste zurück und setzt den Songzeiger auf diesen
 Song. Ist die Liste leer, wird null zurück geliefert
<P>
<DD><DL>

<DT><B>Returns:</B><DD>den ersten Song in der Liste</DL>
</DD>
</DL>
<HR>

<A NAME="getLetzter()"><!-- --></A><H3>
getLetzter</H3>
<PRE>
public Song <B>getLetzter</B>()</PRE>
<DL>
<DD>Liefert den letzten Song in der Songliste zurück und setzt den Songzeiger auf diesen
 Song. Ist die Liste leer, wird null zurück geliefert
<P>
<DD><DL>

<DT><B>Returns:</B><DD>den letzten Song</DL>
</DD>
</DL>
<HR>

<A NAME="setPfad(java.lang.String)"><!-- --></A><H3>
setPfad</H3>
<PRE>
public void <B>setPfad</B>(java.lang.String&nbsp;pfad)</PRE>
<DL>
<DD>Setzt den Dateipfad auf jene Datei aus welcher die Songs gelesen bzw. in welche
 die Songs geschrieben werden soll
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pfad</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="getPfad()"><!-- --></A><H3>
getPfad</H3>
<PRE>
public java.lang.String <B>getPfad</B>()</PRE>
<DL>
<DD>Liest den Dateipfad aus
<P>
<DD><DL>

<DT><B>Returns:</B><DD>dateipfad</DL>
</DD>
</DL>
<HR>

<A NAME="anfuegenNeuen(Song)"><!-- --></A><H3>
anfuegenNeuen</H3>
<PRE>
public int <B>anfuegenNeuen</B>(Song&nbsp;s)</PRE>
<DL>
<DD>Trägt einen neuen Song am Ende der Songliste ein. Die Anzahl der Songs wird um 
 Eins erhöht und die nummerAktueller wird auf diesen Song gesetzt.<br>
 Der Song wird nicht eingetragen, wenn im Array kein Platz mehr ist
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>s</CODE> - der einzutragende Song
<DT><B>Returns:</B><DD>0 falls das Eintragen erfolgreich war<br>
 -1 falls kein einzutragender Song übergeben wurde<br>
 -2 falls die Songliste keinen Platz für einen weiteren Song hat</DL>
</DD>
</DL>
<HR>

<A NAME="aendernAktuellen(Song)"><!-- --></A><H3>
aendernAktuellen</H3>
<PRE>
public int <B>aendernAktuellen</B>(Song&nbsp;s)</PRE>
<DL>
<DD>Ändert den aktuellen Song auf den übergebenen Song ab und sortiert ihn nicht ein
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>s</CODE> - der Song der die zu ändernden Werte enthält
<DT><B>Returns:</B><DD>0 falls die Änderung erfolgreich durchgeführt werden konnte
 -1 falls kein zu ändernder Song übergeben wurde<br>
 -2 falls der aktuelle Song nicht bekannt ist</DL>
</DD>
</DL>
<HR>

<A NAME="loeschenAktuellen()"><!-- --></A><H3>
loeschenAktuellen</H3>
<PRE>
public int <B>loeschenAktuellen</B>()</PRE>
<DL>
<DD>Löscht den aktuellen Song aus der Liste. Dies kann nur passieren, wenn die 
 Nummer des aktuellen Songs gesetzt ist. Da im Array eine Lücke entsteht, müssen
 alle nachfolgenden Songs um eine Stelle nach vorne geschoben werden. Der aktuelle
 Song wird jener Song der dem zu löschenden Song folgt. Ist der zu löschende Song
 der letzte Song in der Liste, so wird der aktuelle Song jener Song der vor dem
 zu löschenden Song vorhanden ist. Ist der zu löschende Song der einzige in der Liste,
 so wird die nummerAktueller auf -1 gesetzt. Beim Löschen wird anzahl um Eins
 verringert
<P>
<DD><DL>

<DT><B>Returns:</B><DD>0 falls das Löschen erfolgreich durchgeführt werden konnte<br>
 -1 falls der aktuelle Song noch nicht gesetzt wurde</DL>
</DD>
</DL>
<HR>

<A NAME="loeschenAlle()"><!-- --></A><H3>
loeschenAlle</H3>
<PRE>
public int <B>loeschenAlle</B>()</PRE>
<DL>
<DD>Löscht alle Songs aus der Liste. Setzt die Anzahl auf 0 und die Nummer des 
 aktuellen Songs auf -1
<P>
<DD><DL>

<DT><B>Returns:</B><DD>0 falls das Löschen erfolgreich war<br>
 -1 falls die Liste bereits leer ist</DL>
</DD>
</DL>
<HR>

<A NAME="lesenSongs()"><!-- --></A><H3>
lesenSongs</H3>
<PRE>
public int <B>lesenSongs</B>()</PRE>
<DL>
<DD>Lädt die Songs aus der Textdatei die in pfad vorhanden ist. Dabei
 werden die bereits in der Songliste gespeicherten Songs gelöscht. Nach dem 
 Einfügen sind die Songs in sortierter Reihenfolge vorhanden. Als aktueller Song 
 wird der Erste angesprungen
<P>
<DD><DL>

<DT><B>Returns:</B><DD>0 falls die Songs erfolgreich ein gefügt werden konnten<br>
 -1 falls der Pfad nicht gesetzt ist<br>
 -2 falls die Datei nicht zu finden ist<br>
 -3 falls ein Lesefehler in der Datei vorhanden ist<br>
 -4 das interner Array kann nicht alle Songs aufnehmen, weil es zu klein dimensioniert
 ist<br></DL>
</DD>
</DL>
<HR>

<A NAME="schreibenSongs()"><!-- --></A><H3>
schreibenSongs</H3>
<PRE>
public int <B>schreibenSongs</B>()</PRE>
<DL>
<DD>Schreibt die Songs in die Textdatei. Dabei werden die in der Datei gespeicherten 
 Songs gelöscht
<P>
<DD><DL>

<DT><B>Returns:</B><DD>0 falls die Songs erfolgreich ein gefügt werden konnten<br>
 -1 falls der Pfad nicht gesetzt wurde<br>
 -2 falls die Datei nicht angelegt werden konnte</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="index.html?Songliste.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Songliste.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>

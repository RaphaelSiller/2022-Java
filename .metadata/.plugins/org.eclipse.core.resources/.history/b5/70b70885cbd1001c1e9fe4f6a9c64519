package TeamArbeitSongliste;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;


public class Songliste {
	private Song[] songs;
	private int nummerAktueller; //Nummer des aktuellen Songs im Array
	private int anzahl;	//der geladenen Programme
	private static final int DEFAULT_MAXANZAHL = 1000; //Falls anzahl inkorrekt ist
	private String pfad = "D:\\Songliste.csv"; //zu der Importierten Datei
	
	Songliste() {
		songs = new Song[DEFAULT_MAXANZAHL];
		anzahl = 0;
		nummerAktueller = -1;
	}
	/**
	 * Importiert Songs aus einer .csv Datei. Der Pfad kann mit setPfad festgelegt werden
	 */
	public void lesenSongs() {
		//Ermittlung Anzahl der Songs
		try {
			anzahl = countLines(pfad) -1;
		} catch (IOException e) {
			System.out.println("Fehler beim zaehlen der Zeilen");
		}
		
		//Lesen der Songs
		BufferedReader reader;
		try {
			reader = new BufferedReader(new FileReader(pfad));
			try {
				reader.readLine();
				for (int i = 0; i < anzahl; i++) {
					songs[i] = new Song();
					String tags = reader.readLine();
					songs[i].setSong(tags);
				}
			} catch (IOException e) {
				System.out.println("Fehler beim importieren der Songs");
			}
			reader.close();
		} catch (FileNotFoundException e) {
			System.out.println("Fehler beim oeffnen der Datei");
		} catch (IOException e) {
			System.out.println("Fehler beim Schliessen der Datei");
		}
		System.out.println("Import fertig");
	}
	
	/**
	 *Liefert den aktuellen Song zurück auf den der Songzeiger nummerAktueller zeigt
	 * @return Liefert den aktuellen Song zurück auf den der Songzeiger nummerAktueller zeigt
	 */
	public Song getAktueller() {
		Song aktuellerSong = songs[nummerAktueller];
		return aktuellerSong;
	}
	
	/**
	 * Liefert den nächsten Song - falls vorhanden - zurück und erhöht den Songzeiger nummerAktueller um Eins. 
	 * Gibt es keinen nächsten Song, wird null zurück geliefert und der Songzeiger nicht erhöht
	 * @return naechster Song 
	 */
	public Song getNaechster() {
		Song ret;
		if(songs[nummerAktueller] != null) {
			ret = songs[nummerAktueller+1];
			nummerAktueller++;
		} else {
			ret = null;
		}
		return ret;
	}
	
	/**
	 * Gibt den letzten Song zurueck
	 * @return letzter Song 
	 */
	public Song getLetzter() {
		Song letzterSong = songs[anzahl-1];
		return letzterSong;
	}
	
	/**
	 * @return Liest den Dateipfad aus
	 */
	public String getPfad() {
		return pfad;
	}

	/**
	 * @param Setzt den Dateipfad auf jene Datei aus welcher die Songs gelesen bzw. in
	 *            welche die Songs geschrieben werden soll
	 */
	public void setPfad(String pfad) {
		this.pfad = pfad;
	}
	
	/**
	 * Ändert den aktuellen Song auf den übergebenen Song ab und sortiert ihn nicht ein
	 * @param s der Song der die zu ändernden Werte enthält
	 * @return 0 falls die Änderung erfolgreich durchgeführt werden konnte 
	 * 		  -1 falls kein zu ändernder Song übergeben wurde
	 *  	  -2 falls der aktuelle Song nicht bekannt ist
	 */
	public int aendernAktuellen(Song s) {
		if(s != null) {
			songs[anzahl] = s;
			return 0;
		} else
			return -1;
	}
	
	/**
	 * Trägt einen neuen Song am Ende der Songliste ein. Die Anzahl der Songs wird um Eins erhöht
	 * und die nummerAktueller wird auf diesen Song gesetzt.
	 * Der Song wird nicht eingetragen, wenn im Array kein Platz mehr ist
	 * 
	 * @param s der einzutragende Song
	 * @return 0 falls das Eintragen erfolgreich war
	 *		  -1 falls kein einzutragender Song übergeben wurde
	 *		  -2 falls die Songliste keinen Platz für einen weiteren Song hat
	 */
	public int anfuegenNeuen(Song s) {
		if(s != null) {
			if(songs[anzahl+1] == null) {
				songs[nummerAktueller] = s;
				return 0;
			} else
				return -1;
		} else
			return -2;
	}
	
	/**
	 * Kindly copied and modified from StackOverflow link: https://stackoverflow.com/a/18009472
	 * gibt die Anzahl an Zeilen einer .csv zurueck.
	 * @param filepath, zu der Datei, von der die Zeilen gezaehlt werden sollen
	 * @return die Anzahl der Zeilen
	 * @throws IOException
	 */
	public static int countLines(String filepath) throws IOException {
		BufferedReader bufferedReader = new BufferedReader(new FileReader(filepath));
	     String input;
	     int count = 0;
	     while((input = bufferedReader.readLine()) != null) {
	         count++;
	     }

//	     System.out.println("Count : "+count);
	     bufferedReader.close();
	     return count;
	}
	
}

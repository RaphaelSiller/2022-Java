package TeamArbeitSonglisteV2;

import javax.swing.*; // JFrame, JTextField, JButton, JLabel
import java.awt.*; // Container
import java.awt.event.*; // Adapter, Listener, Events

public class SonglisteGUI extends JFrame
{
	
	public boolean isDarkModeActive = false;
	private JLabel l1 = null;
	private JLabel l2 = null;
	private JLabel l3 = null;
	private JLabel l4 = null;

	private JTextField textfTitel = null;
	private JTextField textfInterpret = null;
	private JTextField textfAlbum = null;
	private JTextField textfJahr = null;

	private JButton buttonErster = null;
	private JButton buttonVoriger = null;
	private JButton buttonNaechster = null;
	private JButton buttonLetzter4 = null;
	private JButton buttonNeu = null;
	private JButton buttonLoeschen = null;
	private JButton buttonLoeschenAlle = null;
	

	public SonglisteGUI(Songliste songliste) {
		setTitle("Songliste");
		setBounds(700, 400, 395, 255);

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		l1 = new JLabel("Titel:"); // Label f√ºr Titel
		l1.setBounds(10, 10, 60, 30);
		l2 = new JLabel("Interpret:"); // Label f√ºr Intepret
		l2.setBounds(10, 40, 60, 30);
		l3 = new JLabel("Album:"); // Label f√ºr Album
		l3.setBounds(10, 70, 60, 30);
		l4 = new JLabel("Jahr:"); // Label f√ºr Jahr
		l4.setBounds(10, 100, 60, 30);

		textfTitel = new JTextField();
		textfTitel.setBounds(70, 15, 300, 25);
		textfInterpret = new JTextField();
		textfInterpret.setBounds(70, 45, 300, 25);
		textfAlbum = new JTextField();
		textfAlbum.setBounds(70, 75, 300, 25);
		textfJahr = new JTextField();
		textfJahr.setBounds(70, 105, 60, 25);

		buttonErster = new JButton();
		buttonErster.setText("Erster");
		buttonErster.setBounds(10, 140, 91, 35);
		buttonVoriger = new JButton();
		buttonVoriger.setText("Voriger");
		buttonVoriger.setBounds(100, 140, 91, 35);
		buttonNaechster = new JButton();
		buttonNaechster.setText("N√§chster");
		buttonNaechster.setBounds(190, 140, 91, 35);
		buttonLetzter4 = new JButton();
		buttonLetzter4.setText("Letzter");
		buttonLetzter4.setBounds(280, 140, 91, 35);
		buttonNeu = new JButton();
		buttonNeu.setText("Neu");
		buttonNeu.setBounds(10, 175, 111, 35);
		buttonLoeschen = new JButton();
		buttonLoeschen.setText("L√∂schen");
		buttonLoeschen.setBounds(121, 175, 126, 35);
		buttonLoeschenAlle = new JButton();
		buttonLoeschenAlle.setText("Alle l√∂schen");
		buttonLoeschenAlle.setBounds(247, 175, 124, 35);
		JButton JButtonDarkMode = new JButton();
    JButtonDarkMode.setBounds(340, 105, 30, 30);
    JButtonDarkMode.addActionListener(new ActionListener() {
		@Override
		public void actionPerformed(ActionEvent e) {
			Color lightModeColor = new Color(255, 255, 255);
			Color darkModeColor = new Color(28, 31, 34);
			if(isDarkModeActive) {
				JButtonDarkMode.setBackground(lightModeColor);
				textfTitel.setBackground(lightModeColor);
				textfTitel.setForeground(darkModeColor);
				textfInterpret.setBackground(lightModeColor);
				textfInterpret.setForeground(darkModeColor);
				textfAlbum.setBackground(lightModeColor);
				textfAlbum.setForeground(darkModeColor);
				textfJahr.setBackground(lightModeColor);
				textfJahr.setForeground(darkModeColor);

				buttonErster.setBackground(lightModeColor);
				buttonErster.setForeground(darkModeColor);
				buttonVoriger.setBackground(lightModeColor);
				buttonVoriger.setForeground(darkModeColor);
				buttonNaechster.setBackground(lightModeColor);
				buttonNaechster.setForeground(darkModeColor);
				buttonLetzter4.setBackground(lightModeColor);
				buttonLetzter4.setForeground(darkModeColor);
				buttonNeu.setBackground(lightModeColor);
				buttonNeu.setForeground(darkModeColor);
				buttonLoeschen.setBackground(lightModeColor);
				buttonLoeschen.setForeground(darkModeColor);
				buttonLoeschenAlle.setBackground(lightModeColor);
				buttonLoeschenAlle.setForeground(darkModeColor);
				
				getContentPane().setBackground(lightModeColor);
				l1.setForeground(darkModeColor);
				l2.setForeground(darkModeColor);
				l3.setForeground(darkModeColor);
				l4.setForeground(darkModeColor);
				
				isDarkModeActive = false;
			} else {
				JButtonDarkMode.setBackground(darkModeColor);
				textfTitel.setBackground(darkModeColor);
				textfTitel.setForeground(lightModeColor);
				textfInterpret.setBackground(darkModeColor);
				textfInterpret.setForeground(lightModeColor);
				textfAlbum.setBackground(darkModeColor);
				textfAlbum.setForeground(lightModeColor);
				textfJahr.setBackground(darkModeColor);
				textfJahr.setForeground(lightModeColor);

				buttonErster.setBackground(darkModeColor);
				buttonErster.setForeground(lightModeColor);
				buttonVoriger.setBackground(darkModeColor);
				buttonVoriger.setForeground(lightModeColor);
				buttonNaechster.setBackground(darkModeColor);
				buttonNaechster.setForeground(lightModeColor);
				buttonLetzter4.setBackground(darkModeColor);
				buttonLetzter4.setForeground(lightModeColor);
				buttonNeu.setBackground(darkModeColor);
				buttonNeu.setForeground(lightModeColor);
				buttonLoeschen.setBackground(darkModeColor);
				buttonLoeschen.setForeground(lightModeColor);
				buttonLoeschenAlle.setBackground(darkModeColor);
				buttonLoeschenAlle.setForeground(lightModeColor);
				
				getContentPane().setBackground(darkModeColor);
				l1.setForeground(lightModeColor);
				l2.setForeground(lightModeColor);
				l3.setForeground(lightModeColor);
				l4.setForeground(lightModeColor);
				
				isDarkModeActive = true;
			}
		}
	});

		Container contentPane = // Komponenten zum Fenster f√ºgen
				getContentPane();
		contentPane.setLayout(null);
		// add Label
		contentPane.add(l1);
		contentPane.add(l2);
		contentPane.add(l3);
		contentPane.add(l4);
		// add TextField
		contentPane.add(textfTitel);
		contentPane.add(textfInterpret);
		contentPane.add(textfAlbum);
		contentPane.add(textfJahr);
		// add Button
		contentPane.add(buttonErster);
		contentPane.add(buttonVoriger);
		contentPane.add(buttonNaechster);
		contentPane.add(buttonLetzter4);
		contentPane.add(buttonNeu);
		contentPane.add(buttonLoeschen);
		contentPane.add(buttonLoeschenAlle);
		contentPane.add(JButtonDarkMode);
		setVisible(true);
		
		//Speichert die Aenderungen ab, wenn das Fenster geschlossen wird
		this.addWindowListener(new WindowAdapter() {
		    public void windowClosing(WindowEvent e) {
		    	saveChanges(songliste);
		        songliste.schreibenSongs();
		    }
		});
		
		buttonErster.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				saveChanges(songliste);
				Song aktuellerSong = songliste.getAktueller();
				if (aktuellerSong.equals(songliste.getErster())) {
					JOptionPane.showMessageDialog(getContentPane(), "Am Anfang angekommen");
				} else {
					aktuellerSong = songliste.getErster();
					songAnzeigen(aktuellerSong);
				}
			}
		});
		
		
		buttonVoriger.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				saveChanges(songliste);
				if (songliste.getNummerAktueller() < 1) {
					JOptionPane.showMessageDialog(getContentPane(), "Am Anfang angekommen");
				} else {
					Song aktuellerSong = songliste.getVoriger();
					songAnzeigen(aktuellerSong);
				}
			}
		});

		buttonNaechster.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				saveChanges(songliste);
				Song aktuellerSong;
				if ((aktuellerSong = songliste.getNaechster()) == null) {
					JOptionPane.showMessageDialog(getContentPane(), "Am Ende angekommen");
				} else {
					songAnzeigen(aktuellerSong);
				}
			}
		});

		buttonLetzter4.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				saveChanges(songliste);
				Song aktuellerSong = songliste.getAktueller();
				if (aktuellerSong.equals(songliste.getLetzter())) {
					JOptionPane.showMessageDialog(getContentPane(), "Am Ende angekommen");
				} else {
					aktuellerSong = songliste.getLetzter();
					songAnzeigen(aktuellerSong);
				}
			}
		});

		buttonNeu.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					Song aktuellerSong = null;
					aktuellerSong = new Song();
					songliste.anfuegenNeuen(aktuellerSong);
					songAnzeigen(aktuellerSong);
				} catch (Exception e2) {

				}
			}
		});
		
		buttonLoeschen.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				songliste.loeschenAktuellen();
				songAnzeigen(songliste.getAktueller());
			}
		});
		
		buttonLoeschenAlle.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				songliste.loeschenAlle();
				songAnzeigen(null);
				
			}
		});

	}
	
	private void saveChanges(Songliste songliste) {
		try {
			Song aktuellerSong = new Song(textfTitel.getText(), textfInterpret.getText(), textfAlbum.getText(), Integer.parseInt(textfJahr.getText()));
			songliste.aendernAktuellen(aktuellerSong);
		} catch (NumberFormatException e) {
			textfJahr.setText("Muss eine Ganzzahl sein!");
			JOptionPane.showMessageDialog(getContentPane(), "Nur Ganzzahl sind g¸ltig; ƒnderung nicht gespeichert");
		}
	}
	
	public void songAnzeigen(Song s) {
		if(s != null) {
			textfTitel.setText(s.getTitel());
			textfInterpret.setText(s.getInterpret());
			textfAlbum.setText(s.getAlbum());
			textfJahr.setText(String.valueOf(s.getErscheinungsjahr()));
		} else {
			textfTitel.setText("");
			textfInterpret.setText("");
			textfAlbum.setText("");
			textfJahr.setText("");
		}
	}
}
